#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#define MAX_BLOCKS 100
bool bitVector[MAX_BLOCKS] = {false};
int directory[MAX_BLOCKS] = {0};
int numBlocks;
void showBitVector();
void createNewFile();
void showDirectory();
int main() {
srand(time(NULL));
printf("Enter the number of blocks in the disk: ");
scanf("%d", &numBlocks);
char choice;
do {
printf("\nLinked File Allocation Menu:\n");
printf("a) Show Bit Vector\n");
printf("b) Create New File\n");
printf("c) Show Directory\n");
printf("d) Exit\n");
printf("Enter your choice: ");
scanf(" %c", &choice);
switch (choice) {
case 'a':
showBitVector();
break;
case 'b':
createNewFile();
break;
case 'c':
showDirectory();
break;
case 'd':
printf("Exiting...\n");
break;
default:
printf("Invalid choice. Please try again.\n");
}
} while (choice != 'd');
return 0;
}
void showBitVector() {
printf("Bit Vector (Free = 0, Allocated = 1):\n");
for (int i = 0; i < numBlocks; i++) {
printf("%d ", bitVector[i] ? 1 : 0);
}
printf("\n");
}
void createNewFile() {
int startingBlock, fileSize;
printf("Enter starting block for the new file: ");
scanf("%d", &startingBlock);
printf("Enter file size: ");
scanf("%d", &fileSize);
bool canAllocate = true;
for (int i = startingBlock; i < startingBlock + fileSize; i++) {
if (bitVector[i]) {
canAllocate = false;
break;
}
}
if (canAllocate) {
for (int i = startingBlock; i < startingBlock + fileSize; i++) {
bitVector[i] = true;
directory[i] = startingBlock;
}
printf("File created successfully.\n");
} else {
printf("Error: Unable to create file. Some blocks are already allocated.\n");
}
}
void showDirectory() {
printf("Directory:\n");
for (int i = 0; i < numBlocks; i++) {
if (directory[i] != 0) {
printf("Block %d -> File starts at block %d\n", i, directory[i]);
}
}
}

2


#include <stdio.h>
#include <stdlib.h>
void sstf(int request[], int n, int head);
int main() {
int n, head;
printf("Enter the total number of disk blocks: ");
scanf("%d", &n);
int request[n];
printf("Enter the disk request string: ");
for (int i = 0; i < n; i++) {
scanf("%d", &request[i]);
}
printf("Enter the starting head position: ");
scanf("%d", &head);
sstf(request, n, head);
return 0;
}
int findShortestSeekTime(int request[], int n, int head, int visited[]) {
int minDist = __INT_MAX__;
int minIndex = -1;
for (int i = 0; i < n; i++) {
if (!visited[i]) {
int dist = abs(request[i] - head);
if (dist < minDist) {
minDist = dist;
minIndex = i;
}
}
}
return minIndex;
}
void sstf(int request[], int n, int head) {
int totalHeadMovements = 0;
int visited[n];
for (int i = 0; i < n; i++) {
visited[i] = 0;
}
printf("\nOrder of requests served: ");
for (int i = 0; i < n; i++) {
int nextIndex = findShortestSeekTime(request, n, head, visited);
visited[nextIndex] = 1;
totalHeadMovements += abs(request[nextIndex] - head);
head = request[nextIndex];
printf("%d ", head);
}
printf("\nTotal number of head movements: %d\n", totalHeadMovements);
}
